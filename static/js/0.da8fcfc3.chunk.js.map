{"version":3,"file":"static/js/0.da8fcfc3.chunk.js","mappings":"6KAIA,MA4EA,EA5EoBA,IAAyC,IAAxC,MAAEC,EAAQ,IAAG,MAAEC,EAAQ,WAAWF,EACrD,MAAMG,GAAOC,EAAAA,EAAAA,UACPC,GAAQD,EAAAA,EAAAA,UAGRE,GAAYC,EAAAA,EAAAA,UAAQ,KACxB,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAOQ,IAAK,CAC9B,MAAMC,EAAuB,IAAhBC,KAAKC,SACZC,EAAS,GAAqB,IAAhBF,KAAKC,SACnBE,EAAQ,IAAOH,KAAKC,SAAW,IAC/BG,EAAoB,IAAhBJ,KAAKC,SAAiB,GAC1BI,EAAoB,IAAhBL,KAAKC,SAAiB,GAC1BK,EAAoB,IAAhBN,KAAKC,SAAiB,GAEhCJ,EAAKU,KAAK,CAAER,OAAMG,SAAQC,QAAOC,IAAGC,IAAGC,KACzC,CACA,OAAOT,CAAI,GACV,CAACP,IAGEkB,GAAmBZ,EAAAA,EAAAA,UAAQ,KAC/B,MAAMa,EAAW,IAAIC,EAAAA,eACfC,EAAY,IAAIC,aAAgC,EAAnBjB,EAAUkB,QAO7C,OALAlB,EAAUmB,SAAQ,CAACC,EAAUjB,KAC3Ba,EAAUK,IAAI,CAACD,EAASX,EAAGW,EAASV,EAAGU,EAAST,GAAQ,EAAJR,EAAM,IAG5DW,EAASQ,aAAa,WAAY,IAAIP,EAAAA,gBAAsBC,EAAW,IAChEF,CAAQ,GACd,CAACd,IA4BJ,OAzBAuB,EAAAA,EAAAA,IAAUC,IACR,MAAMpB,EAAOoB,EAAMC,MAAMC,iBAEzB1B,EAAUmB,SAAQ,CAACC,EAAUjB,KAC3B,MAAMwB,EAAS,EAAJxB,EACLyB,EAAW/B,EAAKgC,QAAQf,SAASgB,WAAWF,SAASG,MAG3DH,EAASD,GAAMP,EAASX,EAAIJ,KAAK2B,IAAIZ,EAAShB,KAAOA,EAAOgB,EAASZ,OAASY,EAASb,OACvFqB,EAASD,EAAK,GAAKP,EAASV,EAAIL,KAAK4B,IAAIb,EAAShB,KAAOA,EAAOgB,EAASZ,OAASY,EAASb,OAC3FqB,EAASD,EAAK,GAAKP,EAAST,EAAIN,KAAK2B,IAAIZ,EAAShB,KAAOA,EAAOgB,EAASZ,OAASY,EAASb,MAAM,IAGnGV,EAAKgC,QAAQf,SAASgB,WAAWF,SAASM,aAAc,EAGpDnC,EAAM8B,SACR9B,EAAM8B,QAAQD,SAASP,IACJ,GAAjBhB,KAAK2B,IAAI5B,GACQ,GAAjBC,KAAK4B,IAAI7B,GACY,GAArBC,KAAK2B,IAAW,EAAP5B,GAEb,KAIA+B,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,cAAYC,IAAKvC,EAAOwC,SAAU,IAAKC,UAAW,EAAG5C,MAAOA,KAC5DyC,EAAAA,EAAAA,KAAA,UAAQC,IAAKzC,EAAMiB,SAAUD,EAAiBuB,UAC5CC,EAAAA,EAAAA,KAAA,kBACEI,KAAM,IACN7C,MAAOA,EACP8C,aAAW,EACXC,QAAS,GACTC,iBAAe,EACfC,SAAU9B,EAAAA,uBAGR,C","sources":["components/3d/DataStreams.jsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport * as THREE from 'three';\r\n\r\nconst DataStreams = ({ count = 100, color = '#00D4FF' }) => {\r\n  const mesh = useRef();\r\n  const light = useRef();\r\n\r\n  // Generate random particles\r\n  const particles = useMemo(() => {\r\n    const temp = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const time = Math.random() * 100;\r\n      const factor = 20 + Math.random() * 100;\r\n      const speed = 0.01 + Math.random() / 200;\r\n      const x = Math.random() * 100 - 50;\r\n      const y = Math.random() * 100 - 50;\r\n      const z = Math.random() * 100 - 50;\r\n\r\n      temp.push({ time, factor, speed, x, y, z });\r\n    }\r\n    return temp;\r\n  }, [count]);\r\n\r\n  // Create particle geometry\r\n  const particleGeometry = useMemo(() => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const positions = new Float32Array(particles.length * 3);\r\n    \r\n    particles.forEach((particle, i) => {\r\n      positions.set([particle.x, particle.y, particle.z], i * 3);\r\n    });\r\n    \r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    return geometry;\r\n  }, [particles]);\r\n\r\n  // Animation\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime();\r\n\r\n    particles.forEach((particle, i) => {\r\n      const i3 = i * 3;\r\n      const position = mesh.current.geometry.attributes.position.array;\r\n\r\n      // Update particle position\r\n      position[i3] = particle.x + Math.sin(particle.time + time * particle.speed) * particle.factor;\r\n      position[i3 + 1] = particle.y + Math.cos(particle.time + time * particle.speed) * particle.factor;\r\n      position[i3 + 2] = particle.z + Math.sin(particle.time + time * particle.speed) * particle.factor;\r\n    });\r\n\r\n    mesh.current.geometry.attributes.position.needsUpdate = true;\r\n\r\n    // Rotate light\r\n    if (light.current) {\r\n      light.current.position.set(\r\n        Math.sin(time) * 50,\r\n        Math.cos(time) * 50,\r\n        Math.sin(time * 2) * 50\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <pointLight ref={light} distance={100} intensity={4} color={color} />\r\n      <points ref={mesh} geometry={particleGeometry}>\r\n        <pointsMaterial\r\n          size={0.15}\r\n          color={color}\r\n          transparent\r\n          opacity={0.6}\r\n          sizeAttenuation\r\n          blending={THREE.AdditiveBlending}\r\n        />\r\n      </points>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default DataStreams;\r\n"],"names":["_ref","count","color","mesh","useRef","light","particles","useMemo","temp","i","time","Math","random","factor","speed","x","y","z","push","particleGeometry","geometry","THREE","positions","Float32Array","length","forEach","particle","set","setAttribute","useFrame","state","clock","getElapsedTime","i3","position","current","attributes","array","sin","cos","needsUpdate","_jsxs","children","_jsx","ref","distance","intensity","size","transparent","opacity","sizeAttenuation","blending"],"sourceRoot":""}
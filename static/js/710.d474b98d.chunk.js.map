{"version":3,"file":"static/js/710.d474b98d.chunk.js","mappings":"mLAIA,MAAMA,EAAcC,IAAwE,IAAvE,SAAEC,EAAQ,KAAEC,EAAI,MAAEC,EAAQ,UAAS,MAAEC,EAAQ,EAAC,QAAEC,EAAU,OAAOL,EACpF,MAAMM,GAAOC,EAAAA,EAAAA,UACPC,GAAkBD,EAAAA,EAAAA,QAAON,GACzBQ,GAAaF,EAAAA,EAAAA,QAAO,GAkB1B,OAfAG,EAAAA,EAAAA,IAAUC,IACR,MAAMC,EAAOD,EAAME,MAAMC,iBACzBL,EAAWM,UAGPN,EAAWM,QAAU,IAAM,IAE7BT,EAAKS,QAAQd,SAASe,EAAIR,EAAgBO,QAAQ,GAAsB,IAAjBE,KAAKC,IAAIN,GAGhEN,EAAKS,QAAQI,SAASC,EAA4B,IAAxBH,KAAKC,IAAW,IAAPN,GACnCN,EAAKS,QAAQI,SAASH,EAA4B,IAAxBC,KAAKI,IAAW,IAAPT,GACrC,KAIAU,EAAAA,EAAAA,KAAA,SAAOC,IAAKjB,EAAML,SAAUA,EAAUG,MAAOA,EAAMoB,UACjDF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CACHtB,MAAOA,EACPuB,SAAsB,SAAZrB,EAAqB,GAAM,IACrCsB,SAAU,IACVC,WAAY,EACZC,cAAe,IACfC,UAAU,SACVC,QAAQ,SACRC,QAAQ,SACRC,KAAK,oBACL,uBAAqB,EAAMT,SAE1BtB,KAEG,EA4BZ,EAxByBgC,IAA0B,IAAzB,QAAE7B,EAAU,OAAO6B,EAE3C,MAAMC,GAAWC,EAAAA,EAAAA,UAAQ,IAAM,CAC7B,CAAElC,KAAM,KAAMD,SAAU,EAAE,EAAG,KAAM,GAAIE,MAAO,WAC9C,CAAED,KAAM,KAAMD,SAAU,CAAC,GAAI,KAAM,GAAIE,MAAO,WAC9C,CAAED,KAAM,OAAQD,SAAU,EAAE,GAAI,GAAI,GAAIE,MAAO,WAC/C,CAAED,KAAM,QAASD,SAAU,CAAC,EAAG,GAAI,GAAIE,MAAO,aAC7C,IAEH,OACEmB,EAAAA,EAAAA,KAAA,SAAAE,SACGW,EAASE,KAAI,CAACC,EAASC,KACtBjB,EAAAA,EAAAA,KAACvB,EAAW,CAEVE,SAAUqC,EAAQrC,SAClBC,KAAMoC,EAAQpC,KACdC,MAAOmC,EAAQnC,MACfE,QAASA,GAJJkC,MAOH,C","sources":["components/3d/FloatingElements.jsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { Text } from '@react-three/drei';\r\n\r\nconst TechElement = ({ position, text, color = '#00D4FF', scale = 1, quality = 'low' }) => {\r\n  const mesh = useRef();\r\n  const initialPosition = useRef(position);\r\n  const frameCount = useRef(0);\r\n\r\n  // Optimized animation with frame skipping\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime();\r\n    frameCount.current++;\r\n\r\n    // Update every 3rd frame for better performance\r\n    if (frameCount.current % 3 === 0) {\r\n      // Floating animation\r\n      mesh.current.position.y = initialPosition.current[1] + Math.sin(time) * 0.15;\r\n      \r\n      // Slow rotation\r\n      mesh.current.rotation.x = Math.sin(time * 0.15) * 0.08;\r\n      mesh.current.rotation.y = Math.cos(time * 0.15) * 0.08;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={mesh} position={position} scale={scale}>\r\n      <Text\r\n        color={color}\r\n        fontSize={quality === 'high' ? 0.4 : 0.35}\r\n        maxWidth={1.5}\r\n        lineHeight={1}\r\n        letterSpacing={0.01}\r\n        textAlign=\"center\"\r\n        anchorX=\"center\"\r\n        anchorY=\"middle\"\r\n        font=\"/fonts/inter.woff\"\r\n        material-toneMapped={false}\r\n      >\r\n        {text}\r\n      </Text>\r\n    </group>\r\n  );\r\n};\r\n\r\nconst FloatingElements = ({ quality = 'low' }) => {\r\n  // Reduced number of elements for better performance\r\n  const elements = useMemo(() => [\r\n    { text: \"ML\", position: [-4, 1.5, -4], color: '#6B46C1' },\r\n    { text: \"AI\", position: [4, -1.5, -3], color: '#00D4FF' },\r\n    { text: \"Data\", position: [-2, -1, -3], color: '#FFB800' },\r\n    { text: \"Cloud\", position: [3, 2, -5], color: '#00FF88' },\r\n  ], []);\r\n\r\n  return (\r\n    <group>\r\n      {elements.map((element, index) => (\r\n        <TechElement\r\n          key={index}\r\n          position={element.position}\r\n          text={element.text}\r\n          color={element.color}\r\n          quality={quality}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default FloatingElements;\r\n"],"names":["TechElement","_ref","position","text","color","scale","quality","mesh","useRef","initialPosition","frameCount","useFrame","state","time","clock","getElapsedTime","current","y","Math","sin","rotation","x","cos","_jsx","ref","children","Text","fontSize","maxWidth","lineHeight","letterSpacing","textAlign","anchorX","anchorY","font","_ref2","elements","useMemo","map","element","index"],"sourceRoot":""}
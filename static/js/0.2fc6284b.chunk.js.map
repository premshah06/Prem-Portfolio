{"version":3,"file":"static/js/0.2fc6284b.chunk.js","mappings":"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","sources":["components/3d/DataStreams.jsx"],"sourcesContent":["import React, { useRef, useMemo, useCallback } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport * as THREE from 'three';\r\n\r\nconst DataStreams = ({ count = 50, color = '#00D4FF' }) => {\r\n  const mesh = useRef();\r\n  const light = useRef();\r\n  const lastUpdate = useRef(0);\r\n  const frameCount = useRef(0);\r\n\r\n  // Optimized particle data structure\r\n  const particles = useMemo(() => {\r\n    const temp = new Float32Array(count * 6); // x, y, z, time, factor, speed\r\n    for (let i = 0; i < count; i++) {\r\n      const i6 = i * 6;\r\n      temp[i6] = (Math.random() - 0.5) * 100; // x\r\n      temp[i6 + 1] = (Math.random() - 0.5) * 100; // y\r\n      temp[i6 + 2] = (Math.random() - 0.5) * 100; // z\r\n      temp[i6 + 3] = Math.random() * 100; // time\r\n      temp[i6 + 4] = 20 + Math.random() * 80; // factor\r\n      temp[i6 + 5] = 0.01 + Math.random() / 200; // speed\r\n    }\r\n    return temp;\r\n  }, [count]);\r\n\r\n  // Create optimized particle geometry with instancing\r\n  const particleGeometry = useMemo(() => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const positions = new Float32Array(count * 3);\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      const i3 = i * 3;\r\n      const i6 = i * 6;\r\n      positions[i3] = particles[i6];\r\n      positions[i3 + 1] = particles[i6 + 1];\r\n      positions[i3 + 2] = particles[i6 + 2];\r\n    }\r\n    \r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    geometry.setAttribute('particleData', new THREE.BufferAttribute(particles, 6));\r\n    return geometry;\r\n  }, [particles, count]);\r\n\r\n  // Optimized animation with frame skipping\r\n  const updateParticles = useCallback((time) => {\r\n    const positionArray = mesh.current.geometry.attributes.position.array;\r\n    const particleData = mesh.current.geometry.attributes.particleData.array;\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const i3 = i * 3;\r\n      const i6 = i * 6;\r\n      \r\n      const particleTime = particleData[i6 + 3];\r\n      const factor = particleData[i6 + 4];\r\n      const speed = particleData[i6 + 5];\r\n      const baseX = particleData[i6];\r\n      const baseY = particleData[i6 + 1];\r\n      const baseZ = particleData[i6 + 2];\r\n\r\n      positionArray[i3] = baseX + Math.sin(particleTime + time * speed) * factor;\r\n      positionArray[i3 + 1] = baseY + Math.cos(particleTime + time * speed) * factor;\r\n      positionArray[i3 + 2] = baseZ + Math.sin(particleTime + time * speed) * factor;\r\n    }\r\n\r\n    mesh.current.geometry.attributes.position.needsUpdate = true;\r\n  }, [count]);\r\n\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime();\r\n    frameCount.current++;\r\n\r\n    // Skip frames for better performance (update every 2nd frame)\r\n    if (frameCount.current % 2 === 0) {\r\n      updateParticles(time);\r\n    }\r\n\r\n    // Update light less frequently\r\n    if (light.current && frameCount.current % 10 === 0) {\r\n      light.current.position.set(\r\n        Math.sin(time) * 30,\r\n        Math.cos(time) * 30,\r\n        Math.sin(time * 1.5) * 30\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      <pointLight ref={light} distance={80} intensity={2} color={color} />\r\n      <points ref={mesh} geometry={particleGeometry} frustumCulled>\r\n        <pointsMaterial\r\n          size={0.08}\r\n          color={color}\r\n          transparent\r\n          opacity={0.4}\r\n          sizeAttenuation\r\n          blending={THREE.AdditiveBlending}\r\n          depthWrite={false}\r\n        />\r\n      </points>\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default DataStreams;\r\n"],"names":["_ref","count","color","mesh","useRef","light","frameCount","particles","useMemo","temp","Float32Array","i","i6","Math","random","particleGeometry","geometry","THREE","positions","i3","setAttribute","updateParticles","useCallback","time","positionArray","current","attributes","position","array","particleData","particleTime","factor","speed","baseX","baseY","baseZ","sin","cos","needsUpdate","useFrame","state","clock","getElapsedTime","set","_jsxs","children","_jsx","ref","distance","intensity","frustumCulled","size","transparent","opacity","sizeAttenuation","blending","depthWrite"],"sourceRoot":""}